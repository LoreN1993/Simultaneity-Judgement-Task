# ==============================
# 1. Importazione delle librerie necessarie
# ==============================

import random
from psychopy import core  # Import core to use Clock
import csv
import os

# ==============================
# 2. Definizione della funzione per salvare i dati
# ==============================

def salva_dati(soa, key, rt, accuracy, isi, jitter, start_time, end_time, block):
    # Percorso di salvataggio dei risultati
    path_to_save = os.path.expanduser('~/Desktop/Lorenzo/Risultati SJ')  
    os.makedirs(path_to_save, exist_ok=True)

    # Creazione del nome del file in base al numero del partecipante
    subject_nr = var.subject_nr  # Assume che subject_nr sia definito da OpenSesame
    file_name = f"subject_{subject_nr}_sj.csv"
    file_path = os.path.join(path_to_save, file_name)

    # Creazione dell'intestazione del file CSV se non esiste
    if not os.path.exists(file_path):
        with open(file_path, mode='w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['SOA', 'Response', 'RT (s)', 'Accuracy', 'ISI', 'Jittering', 'Start_time (s)', 'End_time (s)', 'Block'])

    # Formattazione di RT e timestamp con tre decimali
    rt_str = f"{rt:.3f}" if isinstance(rt, (int, float)) else rt
    start_time_str = f"{start_time:.3f}"
    end_time_str = f"{end_time:.3f}"

    # Salvataggio dei dati nel file CSV
    with open(file_path, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([soa, key, rt_str, accuracy, isi, jitter, start_time_str, end_time_str, block])

# ==============================
# 3. Definizione delle variabili sperimentali
# ==============================

isi_medio = 1200  # ISI medio di 1200 ms
jittering = random.randint(-300, 300)  # Jittering di Â±300 ms
interval_duration = 300  # Durata dell'intervallo tra croce di fissazione e stimoli
sound_duration = 33  # Durata del suono in ms

# Inizializzazione dell'orologio per la misura dei tempi
if trial_counter == 0:
    rt_clock = core.Clock()  

# Incremento del contatore dei trial
trial_counter += 1

# Controllo che il numero totale di trial non venga superato
if trial_counter > total_trials:
    raise ValueError("Number of trials exceeds the defined total")

# ==============================
# 4. Presentazione della croce di fissazione
# ==============================

isi_casuale = isi_medio + jittering  # ISI variabile prima della croce

# Intervallo bianco tra la risposta e la croce di fissazione
clock.sleep(isi_casuale)

# Visualizzazione della croce di fissazione
fixation_canvas = canvas(exp)
fixation_canvas.line(sx=0, sy=-30, ex=0, ey=30, penwidth=0.60)  # Linea verticale
fixation_canvas.line(sx=-30, sy=0, ex=30, ey=0, penwidth=0.60)  # Linea orizzontale
fixation_canvas.show()

clock.sleep(700)  # Durata fissa di 700 ms per la croce di fissazione

# ==============================
# 5. Presentazione dello schermo vuoto e avvio del timing
# ==============================

blank_canvas.show()
clock.sleep(interval_duration)  # Lo schermo vuoto dura 300 ms

# Memorizzazione del tempo di inizio del trial
start_time = rt_clock.getTime()

# ==============================
# 6. Presentazione degli stimoli in base al SOA
# ==============================

soa_clock = core.Clock()  # Orologio per la misura del SOA

if soa < 0:
    print(f"Negative SOA: {soa}")
    soa_clock.reset()  # Reset dell'orologio

    my_sampler.play()  # Riproduzione del suono
    clock.sleep(abs(soa))  # Aspetta la durata del SOA negativo
    soa_duration = soa_clock.getTime() * 1000  
    print(f"Actual negative SOA duration: {soa_duration:.3f} ms")

    visual_canvas.show()  # Presentazione dello stimolo visivo
    flip_clock = core.Clock()  
    win.flip()  # Sincronizzazione con il refresh dello schermo
    flip_duration = flip_clock.getTime() * 1000  
    print(f"Actual win.flip() duration: {flip_duration:.3f} ms")

elif soa > 0:
    print(f"Positive SOA: {soa}")
    visual_canvas.show()
    flip_clock = core.Clock()
    win.flip()
    flip_duration = flip_clock.getTime() * 1000
    print(f"Actual win.flip() duration: {flip_duration:.3f} ms")

    soa_clock.reset()
    clock.sleep(soa)  
    soa_duration = soa_clock.getTime() * 1000  
    print(f"Actual positive SOA duration: {soa_duration:.3f} ms")

    my_sampler.play()  

else:  # SOA = 0
    print("Zero SOA (simultaneous stimuli)")
    soa_clock.reset()

    my_sampler.play()
    visual_canvas.show()
    flip_clock = core.Clock()
    win.flip()
    flip_duration = flip_clock.getTime() * 1000  
    print(f"Actual win.flip() duration: {flip_duration:.3f} ms")

    soa_duration = soa_clock.getTime() * 1000  
    print(f"Actual simultaneous SOA duration: {soa_duration:.3f} ms")

# ==============================
# 7. Registrazione della risposta e calcolo dei tempi di reazione
# ==============================

# Avvio del timeout di 2000 ms per la risposta del partecipante
key, rt = my_keyboard.get_key(timeout=2000)

# Registrazione del tempo di fine
end_time = rt_clock.getTime()

# Calcolo del tempo di reazione
if key is None:
    rt = 'timeout'  
    accuracy = 0  
else:
    rt = end_time - start_time  

    # Verifica accuratezza della risposta
    if (-150 <= soa <= 150 and key == 's'):
        accuracy = 1
    elif ((soa < -150 or soa > 150) and key == 'j'):
        accuracy = 1
    else:
        accuracy = 0  

# ==============================
# 8. Salvataggio dei dati
# ==============================

salva_dati(soa, key, rt, accuracy, isi_casuale, jittering, start_time, end_time, block_counter)

# ==============================
# 9. Pulizia dello schermo e pausa prima del prossimo trial
# ==============================

blank_canvas.show()

# Pausa esplicita prima di passare al blocco successivo
clock.sleep(500)  

# END_RUN_PHASE
